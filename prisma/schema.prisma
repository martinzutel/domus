generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  about              String?
  age                Int?
  gender             String?
  contact            String?
  isRegisterComplete Boolean?        @default(false)
  accounts           Account[]
  Authenticator      Authenticator[]
  sessions           Session[]
  likedTags          Tag[]           @relation("LikedTags")
  ownTags            Tag[]           @relation("OwnedTags")
  sentMatches  MatchRequest[]  @relation("MatchRequester")
  receivedMatches MatchRequest[] @relation("MatchReceiver")
}

model Account {
  userId            String
  providerAccountId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  tagName  String @unique
  tagId    Int    @id @default(autoincrement())
  tagValue String @default("")
  likedBy  User[] @relation("LikedTags")
  ownedBy  User[] @relation("OwnedTags")
}

model MatchRequest {
  id         String   @id @default(cuid())
  requester  User     @relation("MatchRequester", fields: [requesterId], references: [id])
  requesterId String
  receiver   User     @relation("MatchReceiver", fields: [receiverId], references: [id])
  receiverId String
  status     String @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([requesterId, receiverId])
}